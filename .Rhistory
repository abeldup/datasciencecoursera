## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset ##debug println
##Combine the data from all the requested files
polutant.data <- read.csv(polutant.fileset[1])
head(polutant.data)
}
pollutantmean(directory = "specdata", "some", c(1, 11, 221))
?for
()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset
##Combine the data from all the requested files
polutant.data <- data.frame()
for (each in polutant.fileset) {
polutant.data <- rbind(polutant.data, read.csv(polutant.fileset[1]))
}
head(polutant.data)
tail(polutant.data)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:len(polutant.fileset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.fileset[i]))
}
head(polutant.data)
tail(polutant.data)
}
pollutantmean(directory = "specdata", "some", c(1, 11, 221))
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:length(polutant.fileset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.fileset[i]))
}
head(polutant.data)
tail(polutant.data)
}
pollutantmean(directory = "specdata", "some", c(1, 11, 221))
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:length(polutant.fileset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.fileset[i]))
}
head(polutant.data)
tail(polutant.data)
}
pollutantmean(directory = "specdata", "some", c(1, 11, 221))
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.fileset <- polutant.filelist[id]
##polutant.fileset
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:length(polutant.fileset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.fileset[i]))
}
head(polutant.data)
##tail(polutant.data)
}
pollutantmean(directory = "specdata", "some", c(1, 11, 221))
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.filesubset <- polutant.filelist[id]
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:length(polutant.filesubset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.filesubset[i]))
}
##Determine the median for the pollutant
median(polutant.data[, pollutant], na.rm = TRUE)
}
pollutantmean(directory = "specdata", "sulfate", 1:10)
pollutantmean(directory = "specdata", "nitrate", 70:72)
pollutantmean(directory = "specdata", "nitrate", 23)
?mean
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
polutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(polutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
polutant.filesubset <- polutant.filelist[id]
##Combine the data from all the requested files
polutant.data <- data.frame()
for (i in 1:length(polutant.filesubset)) {
polutant.data <- rbind(polutant.data, read.csv(polutant.filesubset[i]))
}
##Determine the median for the pollutant
mean(polutant.data[, pollutant], na.rm = TRUE)
}
pollutantmean(directory = "specdata", "sulfate", 1:10)
pollutantmean(directory = "specdata", "nitrate", 70:72)
pollutantmean(directory = "specdata", "nitrate", 23)
getwd()
rm(pollutantmean
)
source("pollutantmean.R")
source(paste("datasciencecoursera", "pollutantmean.R", sep = "/")
)
pollutantmean(directory = "specdata", "nitrate", 23)
rm(directory, file_list, workdir, %p%)
rm(directory, file_list, workdir)
rm("%p%")
source(paste("datasciencecoursera", "pollutantmean.R", sep = "/"))
pollutantmean(directory = "specdata", "nitrate", 23)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
##Determine the working directory, and read the file list
workdir <- paste(getwd(), directory, sep = "/")
pollutant.filelist <- list.files(path = workdir, pattern = "*.csv", ignore.case = TRUE, full.names = TRUE)
if (length(pollutant.filelist) == 0) {
return
}
##Subset the file list to only the requested
pollutant.filesubset <- pollutant.filelist[id]
##Initialise data frame for nob counts
pollutant.completecount <- data.frame(id = NA, nobs = NA)
##Check the data from each of the requested files
for (i in 1:length(pollutant.filesubset)) {
pollutant.data <- read.csv(pollutant.filesubset[i])
pollutant.completesubset <- pollutant.data[complete.cases(pollutant.data)]
pollutant.completecount <- rbind(pollutant.completecount,
data.frame(id = i, nobs = ncol(pollutant.completesubset)))
}
pollutant.completecount
}
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
rm(complete
)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
?print
print 10
print(10)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "complete.R", sep = "/"))
complete(directory = "specdata", 3)
complete(directory = "specdata", 1)
complete(directory = "specdata", c(2, 4, 8, 10, 12))
complete(directory = "specdata", 30:25)
complete(directory = "specdata", 3)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 0)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 0)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 100)
corr(directory = "specdata", 1000)
?summary
?cor
?rbind
?cor
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
?rbind
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
complete(directory = "specdata", c(2, 4, 8, 10, 12))
?foot
?tail
source(paste("datasciencecoursera", "corr.R", sep = "/"))
corr(directory = "specdata", 1000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
getwd()
setwd("datasciencecoursera")
getwd()
submit()
getwd()
source("pollutantmean.R")
pollutantmean(getwd(), "nitrate", 20:22)
getwd()
cd ..
cd (..)
setwd("..")
getwd()
setwd("datasciencecoursera")
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 20:22)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
source("corr.R")
corr(directory = "specdata", 1000)
corr(directory = "specdata", 1000)
View(pollutant.completesubset)
View(pollutant.completesubset)
?ncol(pollutant.completesubset)
ncol(pollutant.completesubset)
source("corr.R")
corr(directory = "specdata", 1000)
corr(directory = "specdata", 1000)
source("corr.R")
corr(directory = "specdata", 1000)
?cor
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr
source("corr.R")
corr(directory = "specdata", 1000)
source("corr.R")
corr(directory = "specdata", 1000)
source("corr.R")
corr(directory = "specdata", 1000)
source("corr.R")
corr(directory = "specdata", 1000)
source("corr.R")
corr(directory = "specdata", 1000)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("corr.R")
submit()
9
submit()
9
submit()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
x <- 1:10
if(x > 5) {
x <- 0
}
cube <- function(x, n) {
x^3
}
cube(3)
rm(x, z cube, f)
rm(x, z cube)
rm(x, z, cube, f)
rm(cr)
?gl
x <- rnorm(10)
x
f1 <- gl(2, 5)
f1
f2 <- gl(5, 2)
f2
interaction(f1, f2)
?interaction
split(x, list(f1, f2))
split(x, list(f1, f2), drop = TRUE)
rmrm(f1, f2, x)
rm(f1, f2, x)
library(datasets)
data(iris)
?iiris?iiris
?iris
mean(iris$Sepal.Length)
?split
split(iris, virginica)
split(iris, "virginica")
lapply(iris, mean)
mean(iris$Sepal.Length[, species=virginica])
mean(iris$Sepal.Length[, species="virginica"])
mean(subset(iris, species="virginica"))
subset(iris, species="virginica")
subset(iris, species=" virginica")
subset(iris, species=="virginica")
?iris
iris
subset(iris, Species=="virginica")
mean(subset(iris, Species=="virginica")[,Sepal.Length]
)
sapply(subset(iris, Species=="virginica"), mean)
?sapply
lapply(subset(iris, Species=="virginica"), mean)
rowMeans(iris[, 1:4])
colMeans(iris[,1:4])
apply(iris[, 1:4], 2, mean)
?apply
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
?ls
ls()
View(corr)
rm(corr)
rm9Q
rm(corr, complete)
View(pollutantmean)
rm(pollutantmean)
